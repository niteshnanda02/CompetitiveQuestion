class Solution {
    static int[][] dp=new int[1001][1001];
    public String longestPalindrome(String s) {
        for(int[] a:dp)
            Arrays.fill(a,-1);
        int n=s.length();
        int maxLen=0;
        String maxStr="";
        for(int j=0;j<n;j++){
            for(int i=0;i<=j;i++){
                if(i==j){
                    dp[i][j]=1;
                    if(maxLen<j-i+1){
                        maxLen=j-i+1;
                        maxStr=s.substring(i,j+1);
                    }
                }else if(j-1==i){
                    if(s.charAt(i)==s.charAt(j)){
                        dp[i][j]=1;
                        if(maxLen<j-i+1){
                            maxLen=j-i+1;
                            maxStr=s.substring(i,j+1);
                        }
                    }else
                        dp[i][j]=0;
                }else{
                    //pal(i,j)=char(i)==char(j)&&pal(i+1)(j-1)
                    if(s.charAt(i)==s.charAt(j)&&dp[i+1][j-1]==1){
                        dp[i][j]=1;
                        if(maxLen<j-i+1){
                            maxLen=j-i+1;
                            maxStr=s.substring(i,j+1);
                        }
                    }else{
                        dp[i][j]=0;
                    }
                }
            }
        }
        
        
        
        return maxStr;
    }
}
