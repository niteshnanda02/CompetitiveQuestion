/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 //first approach with two traversal
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head==null)
            return null;
        if(head.next==null)
            return null;
        
        int size=getsize(head);
        int index=size-n;
        index--;
        if(index<0){
            head=head.next;
        }else{
        ListNode node=getNode(head,index);
        node.next=node.next.next;
        }
        return head;
    }
    private ListNode getNode(ListNode head,int ind){
        ListNode temp=head; 
        for(int i=0;i<ind;i++){
            temp=temp.next;
        }
        return temp;
    }
    private int getsize(ListNode node){
        ListNode temp=node; 
        int i=0;
        while(temp!=null){
            temp=temp.next;
            i++;
        }
        return i;
                
    }
}

//in one traversal

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy=new ListNode(0);
        dummy.next=head;
        ListNode first=dummy;
        ListNode second=dummy;
        //Advance first pointer so that gap between first and second is n nodes apart;
        for(int i=1;i<=n+1;i++){
            first=first.next;
        }
        
        //Move first to the end, mainting the gap
        while(first!=null){
            first=first.next;
            second=second.next;
        }
        second.next=second.next.next;
        return dummy.next;
    }
}
