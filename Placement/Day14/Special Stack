class GfG{
    static int minElement=-1;
	public void push(int a,Stack<Integer> s)
	{
	    //add code here.
	    if(s.isEmpty()){
	        s.push(a);
	        minElement=a;
	    }else{
	        if(minElement<=a){
	            s.push(a);
	        }else{
	            int x=2*a-minElement;
	            s.push(x);
	            minElement=a;
	        }
	    }
	}
	public int pop(Stack<Integer> s)
        {
            //add code here.
            if(s.isEmpty()){
                minElement=-1;
                return -1;
            }
            else{
                if(s.peek()>=minElement)
                    return s.pop();
                else{
                    minElement=2*minElement-s.peek();
                    return s.pop();
                }
            }
	}
	public int min(Stack<Integer> s)
        {
           //add code here.
           if(s.isEmpty()){
               return -1;
           }
           return minElement;
	}
	public boolean isFull(Stack<Integer>s, int n)
        {
           //add code here.
           return s.size()==n;
	}
	public boolean isEmpty(Stack<Integer>s)
        {
           //add code here.
           return s.size()==0;
	}
}
