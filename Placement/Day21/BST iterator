/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class BSTIterator {
    static LinkedList<Integer> queue;
    public BSTIterator(TreeNode root) {
        queue=new LinkedList<>();
        init(root);
    }
    private void init(TreeNode node){
        if(node==null)
            return;
        
        init(node.left);
        queue.add(node.val);
        init(node.right);
    }
    
    /** @return the next smallest number */
    public int next() {
        int rv=queue.removeFirst();
        return rv;
    }
    
    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        if(!queue.isEmpty())
            return true;
        else
            return false;
    }
}

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator obj = new BSTIterator(root);
 * int param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */
